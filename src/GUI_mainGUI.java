
import java.io.File;
import static java.lang.Math.random;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import java.sql.*;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author james
 */
public class GUI_mainGUI extends javax.swing.JFrame {

    Connection conn;
    Statement st;
    ResultSet rs;
    String editOrAdd = "neither";
    DefaultListModel blankListModel = new DefaultListModel();
    List<String> clientJobs = new ArrayList<>();
    private int itemStateChangedInt = 1;
    private String selectedJobID;

    /**
     * Creates new form mainGUI
     */
    public GUI_mainGUI() {
        initComponents();
        initComponentsCustom();
        connection();
        populateClientTable();
        populateJobTable();
        populateStaffTable();

        DefaultListModel tempModel = new DefaultListModel();
        tempModel.addElement("No client selected");
        client_li_jobs.setModel(tempModel);
        blankListModel = (DefaultListModel) client_li_jobs.getModel();

        jobs_but_manageJob.setEnabled(false);
        //jobs_but_removeRecord.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewButGroup = new javax.swing.ButtonGroup();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        mainTabs = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        client_table_clients = new javax.swing.JTable();
        client_but_newClient = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        client_but_done = new javax.swing.JButton();
        client_but_cancel = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        client_tf_ID = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        client_tf_address = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        client_but_insertAdr = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        client_tf_email = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        client_tf_lname = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        client_tf_fname = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        client_tf_nr = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel29 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        client_l_clientCode = new javax.swing.JLabel();
        client_but_manageClient = new javax.swing.JButton();
        client_tf_searchInput = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        client_li_jobs = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        client_but_manageJob = new javax.swing.JButton();
        client_but_search = new javax.swing.JButton();
        client_combo_searchVia = new javax.swing.JComboBox<>();
        client_but_showAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jobs_rb_all = new javax.swing.JRadioButton();
        jobs_rb_open = new javax.swing.JRadioButton();
        jobs_rb_QIP = new javax.swing.JRadioButton();
        jobs_rb_QAcc = new javax.swing.JRadioButton();
        jobs_rb_QRej = new javax.swing.JRadioButton();
        jobs_rb_WIP = new javax.swing.JRadioButton();
        jobs_rb_pPend = new javax.swing.JRadioButton();
        jobs_rb_pRec = new javax.swing.JRadioButton();
        jobs_rb_closed = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jobs_table_jobs = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jobs_tf_fname = new javax.swing.JTextField();
        jobs_tf_lname = new javax.swing.JTextField();
        jobs_tf_nr = new javax.swing.JTextField();
        jobs_tf_email = new javax.swing.JTextField();
        jobs_l_clientCode = new javax.swing.JLabel();
        jobs_but_newJob = new javax.swing.JButton();
        jobs_but_manageJob = new javax.swing.JButton();
        jobs_but_refreshTable = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        staff_but_newStaff = new javax.swing.JButton();
        staff_but_manageStaff = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        staff_table_staff = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        staff_but_done = new javax.swing.JButton();
        staff_but_cancel = new javax.swing.JButton();
        staff_tf_ID = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        staff_tf_address = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        staff_but_insertAddress = new javax.swing.JButton();
        staff_tf_email = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        staff_tf_skillsetInput = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        staff_tf_lname = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        staff_l_staffCode = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        staff_list_skillset = new javax.swing.JList<String>();
        jLabel46 = new javax.swing.JLabel();
        staff_tf_fname = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        staff_tf_nr = new javax.swing.JTextField();
        staff_but_add = new javax.swing.JButton();
        staff_but_remove = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        staff_spin_rate = new javax.swing.JSpinner();

        jMenu5.setText("File");
        jMenuBar2.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar2.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 745));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 745));

        mainTabs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainTabs.setToolTipText("");
        mainTabs.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        mainTabs.setName(""); // NOI18N

        jPanel2.setMaximumSize(new java.awt.Dimension(1024, 745));
        jPanel2.setMinimumSize(new java.awt.Dimension(1024, 745));
        jPanel2.setPreferredSize(new java.awt.Dimension(1024, 745));

        client_table_clients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        client_table_clients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                client_table_clientsMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(client_table_clients);

        client_but_newClient.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        client_but_newClient.setText("New Client");
        client_but_newClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        client_but_newClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                client_but_newClientMouseClicked(evt);
            }
        });
        client_but_newClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_newClientActionPerformed(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        client_but_done.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        client_but_done.setText("Done");
        client_but_done.setEnabled(false);
        client_but_done.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                client_but_doneMouseClicked(evt);
            }
        });
        client_but_done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_doneActionPerformed(evt);
            }
        });

        client_but_cancel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        client_but_cancel.setText("Cancel");
        client_but_cancel.setEnabled(false);
        client_but_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_cancelActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel30.setText("Mandatory To Accept Quote");

        client_tf_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_ID.setEnabled(false);
        client_tf_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_tf_IDActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel33.setText("ID");

        client_tf_address.setEditable(false);
        client_tf_address.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_address.setEnabled(false);

        jLabel34.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel34.setText("Billing Address");

        client_but_insertAdr.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_but_insertAdr.setText("Insert Address");
        client_but_insertAdr.setEnabled(false);
        client_but_insertAdr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_insertAdrActionPerformed(evt);
            }
        });

        client_tf_email.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_email.setEnabled(false);

        jLabel31.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel31.setText("Email Address");

        client_tf_lname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_lname.setEnabled(false);

        jLabel32.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel32.setText("Last Name");

        client_tf_fname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_fname.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel12.setText("First Name");

        client_tf_nr.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_tf_nr.setEnabled(false);

        jLabel28.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel28.setText("Contact no.");

        jLabel29.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel29.setText("Mandatory To Quote");

        jLabel37.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel37.setText("Client Code:");

        client_l_clientCode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_l_clientCode.setText("(Code)");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jLabel34)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(client_tf_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(client_tf_address, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(client_but_insertAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_l_clientCode, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(97, 97, 97)
                                .addComponent(client_but_cancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_but_done, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(client_tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28)
                                    .addComponent(client_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(client_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel32)
                                    .addComponent(client_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(client_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel32))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(client_but_done)
                            .addComponent(client_but_cancel)
                            .addComponent(jLabel37)
                            .addComponent(client_l_clientCode)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(client_tf_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(client_tf_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 21, Short.MAX_VALUE)
                        .addComponent(client_but_insertAdr)))
                .addContainerGap())
        );

        client_but_manageClient.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        client_but_manageClient.setText("Edit Client");
        client_but_manageClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        client_but_manageClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_manageClientActionPerformed(evt);
            }
        });

        client_tf_searchInput.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        client_li_jobs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        client_li_jobs.setMaximumSize(new java.awt.Dimension(39, 91));
        client_li_jobs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                client_li_jobsValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(client_li_jobs);

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel14.setText("Jobs");

        client_but_manageJob.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        client_but_manageJob.setText("Manage Job");
        client_but_manageJob.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        client_but_manageJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_manageJobActionPerformed(evt);
            }
        });

        client_but_search.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_but_search.setText("Search");
        client_but_search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        client_but_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                client_but_searchMouseClicked(evt);
            }
        });
        client_but_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_searchActionPerformed(evt);
            }
        });

        client_combo_searchVia.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        client_combo_searchVia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Surname", "ID" }));

        client_but_showAll.setText("Show All");
        client_but_showAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                client_but_showAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(client_but_newClient, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_but_manageClient, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_combo_searchVia, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_tf_searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_but_search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(client_but_showAll))
                            .addComponent(jScrollPane7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(client_but_manageJob, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane8))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(client_but_newClient)
                            .addComponent(client_but_manageClient)
                            .addComponent(client_tf_searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(client_but_search)
                            .addComponent(client_but_showAll)
                            .addComponent(jLabel14)
                            .addComponent(client_but_manageJob)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(client_combo_searchVia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabs.addTab("Clients", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("View");

        viewButGroup.add(jobs_rb_all);
        jobs_rb_all.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_all.setText("All");
        jobs_rb_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_allActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_open);
        jobs_rb_open.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_open.setText("Open");
        jobs_rb_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_openActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_QIP);
        jobs_rb_QIP.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_QIP.setText("Quote I.P.");
        jobs_rb_QIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_QIPActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_QAcc);
        jobs_rb_QAcc.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_QAcc.setText("Quote Acc.");
        jobs_rb_QAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_QAccActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_QRej);
        jobs_rb_QRej.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_QRej.setText("Quote Rej.");
        jobs_rb_QRej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_QRejActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_WIP);
        jobs_rb_WIP.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_WIP.setText("Work I.P.");
        jobs_rb_WIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_WIPActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_pPend);
        jobs_rb_pPend.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_pPend.setText("P. Pending");
        jobs_rb_pPend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_pPendActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_pRec);
        jobs_rb_pRec.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_pRec.setText("P. Recieved");
        jobs_rb_pRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_pRecActionPerformed(evt);
            }
        });

        viewButGroup.add(jobs_rb_closed);
        jobs_rb_closed.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jobs_rb_closed.setText("Closed");
        jobs_rb_closed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_rb_closedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jobs_rb_all)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jobs_rb_open)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_QIP)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_QAcc)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_QRej)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_WIP, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_pPend)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_pRec)
                                .addGap(30, 30, 30)
                                .addComponent(jobs_rb_closed))
                            .addComponent(jSeparator1))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobs_rb_all)
                    .addComponent(jobs_rb_open)
                    .addComponent(jobs_rb_QIP)
                    .addComponent(jobs_rb_QAcc)
                    .addComponent(jobs_rb_QRej)
                    .addComponent(jobs_rb_WIP)
                    .addComponent(jobs_rb_pPend)
                    .addComponent(jobs_rb_pRec)
                    .addComponent(jobs_rb_closed))
                .addContainerGap())
        );

        jobs_table_jobs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jobs_table_jobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"J0001", "New Wooden Fence", "Active"},
                {"J0002", "Repaint Wall Blue", "Quoted"},
                {"J0003", "Repair wooden fence gate", "Requested"},
                {"J0004", "Repair Wooden Fence", "Active"}
            },
            new String [] {
                "Job ID", "Job Title", "Satus"
            }
        ));
        jobs_table_jobs.setFillsViewportHeight(true);
        jobs_table_jobs.setRowHeight(35);
        jobs_table_jobs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jobs_table_jobs.setShowVerticalLines(false);
        jobs_table_jobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jobs_table_jobsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jobs_table_jobs);
        if (jobs_table_jobs.getColumnModel().getColumnCount() > 0) {
            jobs_table_jobs.getColumnModel().getColumn(0).setMinWidth(100);
            jobs_table_jobs.getColumnModel().getColumn(0).setMaxWidth(100);
            jobs_table_jobs.getColumnModel().getColumn(1).setResizable(false);
            jobs_table_jobs.getColumnModel().getColumn(2).setMinWidth(100);
            jobs_table_jobs.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel7.setText("Client");

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel8.setText("First Name");

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel9.setText("Contact Number");

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel10.setText("Email");

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel11.setText("Last Name");

        jobs_tf_fname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jobs_tf_fname.setText(" ");
        jobs_tf_fname.setEnabled(false);

        jobs_tf_lname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jobs_tf_lname.setText(" ");
        jobs_tf_lname.setEnabled(false);

        jobs_tf_nr.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jobs_tf_nr.setText(" ");
        jobs_tf_nr.setEnabled(false);

        jobs_tf_email.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jobs_tf_email.setText(" ");
        jobs_tf_email.setEnabled(false);

        jobs_l_clientCode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jobs_l_clientCode.setText("(client Code Here)");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(153, 153, 153))
                            .addComponent(jobs_tf_fname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jobs_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jobs_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jobs_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobs_l_clientCode, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobs_tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobs_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobs_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobs_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jobs_l_clientCode))
                .addContainerGap())
        );

        jobs_but_newJob.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jobs_but_newJob.setText("New Job");
        jobs_but_newJob.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jobs_but_newJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_but_newJobActionPerformed(evt);
            }
        });

        jobs_but_manageJob.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jobs_but_manageJob.setText("Manage Job");
        jobs_but_manageJob.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jobs_but_manageJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_but_manageJobActionPerformed(evt);
            }
        });

        jobs_but_refreshTable.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jobs_but_refreshTable.setText("Refresh Table");
        jobs_but_refreshTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jobs_but_refreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobs_but_refreshTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jobs_but_newJob, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobs_but_manageJob, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jobs_but_refreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 980, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobs_but_newJob)
                    .addComponent(jobs_but_manageJob)
                    .addComponent(jobs_but_refreshTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabs.addTab("Jobs", jPanel1);

        staff_but_newStaff.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        staff_but_newStaff.setText("New Staff");
        staff_but_newStaff.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        staff_but_newStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_newStaffActionPerformed(evt);
            }
        });

        staff_but_manageStaff.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        staff_but_manageStaff.setText("Edit Staff");
        staff_but_manageStaff.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        staff_but_manageStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_manageStaffActionPerformed(evt);
            }
        });

        staff_table_staff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        staff_table_staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staff_table_staffMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(staff_table_staff);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        staff_but_done.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        staff_but_done.setText("Done");
        staff_but_done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_doneActionPerformed(evt);
            }
        });

        staff_but_cancel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        staff_but_cancel.setText("Cancel");
        staff_but_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_cancelActionPerformed(evt);
            }
        });

        staff_tf_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel40.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel40.setText("ID");

        staff_tf_address.setEditable(false);
        staff_tf_address.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel41.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel41.setText("Billing Address");

        staff_but_insertAddress.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        staff_but_insertAddress.setText("Insert Address");
        staff_but_insertAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_insertAddressActionPerformed(evt);
            }
        });

        staff_tf_email.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel42.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel42.setText("Email Address");

        staff_tf_skillsetInput.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel44.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel44.setText("First Name");

        staff_tf_lname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel45.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel45.setText("Last Name");

        jLabel47.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel47.setText("Staff Code:");

        staff_l_staffCode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        staff_l_staffCode.setText("(Code)");

        staff_list_skillset.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {/* "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" */};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane10.setViewportView(staff_list_skillset);

        jLabel46.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel46.setText("Skillset");

        staff_tf_fname.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel49.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel49.setText("Contact No.");

        staff_tf_nr.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        staff_but_add.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        staff_but_add.setText("Add");
        staff_but_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_addActionPerformed(evt);
            }
        });

        staff_but_remove.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        staff_but_remove.setText("Remove");
        staff_but_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_but_removeActionPerformed(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel50.setText("Rate:");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(staff_but_add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staff_but_remove))
                    .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(staff_tf_skillsetInput, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel49))
                    .addComponent(staff_tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staff_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staff_spin_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel47)
                        .addGap(18, 18, 18)
                        .addComponent(staff_l_staffCode, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(staff_but_cancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(staff_but_done, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(staff_but_insertAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staff_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staff_tf_address)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staff_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel45))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staff_tf_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jLabel45)
                    .addComponent(jLabel44)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staff_tf_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staff_tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staff_tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel41))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(staff_tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(staff_tf_nr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(staff_tf_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel49)
                                .addGap(28, 28, 28)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(staff_but_insertAddress)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staff_but_done)
                            .addComponent(staff_but_cancel))
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staff_tf_skillsetInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel50)
                            .addComponent(staff_spin_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel47)
                            .addComponent(staff_l_staffCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staff_but_remove)
                            .addComponent(staff_but_add))
                        .addGap(0, 22, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane9)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(staff_but_newStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staff_but_manageStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 662, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staff_but_newStaff)
                    .addComponent(staff_but_manageStaff))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabs.addTab("Staff", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 1012, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 733, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        disablePanels();
    }

    //methods
    private String generateNewJobID() {
        //generate a new job ID as a string to parse through to the GUIjobStates pane
        //so that it can "manage" the newly created Job
        return "";
    }

    private String getSelectedJobID() {
        //identify the job ID that is currently selected in the list/the table as a string to parse through to the GUIjobStates pane
        //so that it can "manage" an already created Job

        String selectedJobID = "";
        if (jobs_table_jobs.getSelectedRow() > -1) {
            selectedJobID = jobs_table_jobs.getValueAt(jobs_table_jobs.getSelectedRow(), 0) + "";
        }
        return selectedJobID;
    }

    private void manageJob(String selectedJobID) {
        try {
            GUI_jobStates jobStatesGUI = new GUI_jobStates(selectedJobID, 0);
            jobStatesGUI.setVisible(true);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Please select a job first.");
        }

    }

    private boolean isValidString(String a) {
        return !a.equals("");
    }

    private void doSave() {
        //after save.. display message
        JOptionPane.showMessageDialog(rootPane, "Work Saved");
    }

    private void doClose() {
        System.exit(0);
    }

    private void disablePanels() {
        enablePanel_Client(false);
        enablePanel_Staff(false);
    }

    private void enablePanel_Client(boolean a) {
        client_but_cancel.setEnabled(a);
        client_but_done.setEnabled(a);
        client_but_insertAdr.setEnabled(a);
        client_tf_ID.setEnabled(a);
        client_tf_address.setEnabled(a);
        client_tf_email.setEnabled(a);
        client_tf_fname.setEnabled(a);
        client_tf_nr.setEnabled(a);
        client_tf_lname.setEnabled(a);
        //As per user testing
        //Place a ! infrount of a to enable it if needed
        client_but_manageClient.setEnabled(a);
        //As per user testing
        //Place a ! infrount of a to enable it if needed
        client_but_manageJob.setEnabled(a);
        client_but_newClient.setEnabled(!a);
        client_but_search.setEnabled(!a);
        client_combo_searchVia.setEnabled(!a);
        client_tf_searchInput.setEnabled(!a);
        //As per user testing
        //Place a ! infrount of a to enable it if needed
        client_li_jobs.setEnabled(a);
        client_table_clients.setEnabled(!a);

        mainTabs.setEnabledAt(0, !a);
        mainTabs.setEnabledAt(1, !a);
        mainTabs.setEnabledAt(2, !a);
    }

    private void enablePanel_Staff(boolean a) {
        staff_but_insertAddress.setEnabled(a);
        staff_but_add.setEnabled(a);
        staff_but_remove.setEnabled(a);
        staff_but_cancel.setEnabled(a);
        staff_but_done.setEnabled(a);
        staff_list_skillset.setEnabled(a);
        staff_spin_rate.setEnabled(a);
        staff_tf_ID.setEnabled(a);
        staff_tf_email.setEnabled(a);
        staff_tf_fname.setEnabled(a);
        staff_tf_lname.setEnabled(a);
        staff_tf_nr.setEnabled(a);
        staff_tf_skillsetInput.setEnabled(a);
        staff_tf_address.setEnabled(false);

        staff_but_manageStaff.setEnabled(false);

        staff_but_newStaff.setEnabled(!a);
        staff_table_staff.setEnabled(!a);

        mainTabs.setEnabledAt(0, !a);
        mainTabs.setEnabledAt(1, !a);
        mainTabs.setEnabledAt(2, !a);
    }

    private void clearPanel_Staff() {
        DefaultListModel a = new DefaultListModel();
        staff_list_skillset.setModel(a);
        staff_tf_ID.setText("");
        staff_l_staffCode.setText("");
        staff_tf_address.setText("");
        staff_tf_email.setText("");
        staff_tf_fname.setText("");
        staff_tf_lname.setText("");
        staff_tf_nr.setText("");
        staff_tf_skillsetInput.setText("");
        staff_list_skillset.removeAll();
        staff_spin_rate.setValue(0);
    }

    private void clearPanel_Client() {
        client_tf_ID.setText("");
        client_tf_address.setText("");
        client_tf_email.setText("");
        client_tf_fname.setText("");
        client_tf_nr.setText("");
        client_tf_lname.setText("");
    }

    private void staff_tf_skillsetInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staff_tf_skillsetInputFocusGained
        staff_tf_skillsetInput.setText("");
    }//GEN-LAST:event_staff_tf_skillsetInputFocusGained

    private void staff_but_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_removeActionPerformed

        int[] selectedSkills = staff_list_skillset.getSelectedIndices();
        DefaultListModel allSkills = (DefaultListModel) staff_list_skillset.getModel();
        if (selectedSkills.length > 0) {
            for (int i = 0; i < selectedSkills.length; i++) {
                allSkills.remove(selectedSkills[i]);
            }
            staff_list_skillset.setModel(allSkills);
        }
    }//GEN-LAST:event_staff_but_removeActionPerformed

    private void staff_but_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_addActionPerformed
        String input = staff_tf_skillsetInput.getText();
        if (isValidString(input)) {
            DefaultListModel skillset = (DefaultListModel) staff_list_skillset.getModel();
            skillset.addElement(input);
            staff_list_skillset.setModel(skillset);
            staff_tf_skillsetInput.setText("");
        }
    }//GEN-LAST:event_staff_but_addActionPerformed

    private void staff_but_insertAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_insertAddressActionPerformed
        AddressPane ap = new AddressPane(staff_tf_address);
    }//GEN-LAST:event_staff_but_insertAddressActionPerformed

    private void staff_but_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_cancelActionPerformed
        enablePanel_Staff(false);
        clearPanel_Staff();
    }//GEN-LAST:event_staff_but_cancelActionPerformed

    private void staff_but_doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_doneActionPerformed
        if (editOrAdd.equals("add")) {
            addStaff();
        } else if (editOrAdd.equals("edit")) {
            editStaff();
        }
        editOrAdd = "";
        staff_but_insertAddress.setText("Address");
        enablePanel_Staff(false);
        clearPanel_Staff();
        populateStaffTable();
    }//GEN-LAST:event_staff_but_doneActionPerformed

    private void staff_table_staffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staff_table_staffMouseClicked
        populateStaffTextfields();
        staff_but_manageStaff.setEnabled(staff_table_staff.getSelectedRow() > -1);
    }//GEN-LAST:event_staff_table_staffMouseClicked

    private void staff_but_manageStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_manageStaffActionPerformed
        editOrAdd = "edit";
        enablePanel_Staff(true);
        staff_but_insertAddress.setText("Edit Billing Address");
    }//GEN-LAST:event_staff_but_manageStaffActionPerformed

    private void staff_but_newStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_but_newStaffActionPerformed
        clearPanel_Staff();
        enablePanel_Staff(true);
        editOrAdd = "add";
        staff_but_insertAddress.setText("Add Billing Address");
    }//GEN-LAST:event_staff_but_newStaffActionPerformed

    private void jobs_but_refreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_but_refreshTableActionPerformed
        populateJobTable();
    }//GEN-LAST:event_jobs_but_refreshTableActionPerformed

    private void jobs_but_manageJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_but_manageJobActionPerformed
        String selectedJobID = getSelectedJobID();
        if (!selectedJobID.equals("")) {
            int row = jobs_table_jobs.getSelectedRow();
            selectedJobID = (jobs_table_jobs.getModel().getValueAt(row, 0).toString());
            manageJob(selectedJobID);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Job to manage");
        }
    }//GEN-LAST:event_jobs_but_manageJobActionPerformed

    private void jobs_but_newJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_but_newJobActionPerformed
        String newJobID = generateNewJobID();
        GUI_jobStates jobStatesGUI = new GUI_jobStates(newJobID, 0);
        jobStatesGUI.setVisible(true);
    }//GEN-LAST:event_jobs_but_newJobActionPerformed

    private void jobs_table_jobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jobs_table_jobsMouseClicked
        //As per user testing
        //Will only enable if a job has been selected
        jobs_but_manageJob.setEnabled(true);
        //As per user testing
        //Will only enable if a job has been selected
        //jobs_but_removeRecord.setEnabled(true);

        populateClientTextFieldsForJob();
    }//GEN-LAST:event_jobs_table_jobsMouseClicked

    private void jobs_rb_closedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_closedActionPerformed
        if (jobs_rb_closed.isSelected()) {
            populateJobTable("Closed");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_closedActionPerformed

    private void jobs_rb_pRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_pRecActionPerformed
        if (jobs_rb_pRec.isSelected()) {
            populateJobTable("Payment Received");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_pRecActionPerformed

    private void jobs_rb_pPendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_pPendActionPerformed
        if (jobs_rb_pPend.isSelected()) {
            populateJobTable("Payment Pending");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_pPendActionPerformed

    private void jobs_rb_WIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_WIPActionPerformed
        if (jobs_rb_WIP.isSelected()) {
            populateJobTable("Work in Progress");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_WIPActionPerformed

    private void jobs_rb_QRejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_QRejActionPerformed
        if (jobs_rb_QRej.isSelected()) {
            populateJobTable("Quote Rejected");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_QRejActionPerformed

    private void jobs_rb_QAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_QAccActionPerformed
        if (jobs_rb_QAcc.isSelected()) {
            populateJobTable("Quote Accepted");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_QAccActionPerformed

    private void jobs_rb_QIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_QIPActionPerformed
        if (jobs_rb_QIP.isSelected()) {
            populateJobTable("Quote in Progress");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_QIPActionPerformed

    private void jobs_rb_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_openActionPerformed
        if (jobs_rb_open.isSelected()) {
            populateJobTable("Open");
        } else {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_openActionPerformed

    private void jobs_rb_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobs_rb_allActionPerformed
        if (jobs_rb_all.isSelected()) {
            populateJobTable();
        }
    }//GEN-LAST:event_jobs_rb_allActionPerformed

    private void client_but_showAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_showAllActionPerformed
        populateClientTable();
    }//GEN-LAST:event_client_but_showAllActionPerformed

    private void client_but_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_client_but_searchActionPerformed

    private void client_but_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client_but_searchMouseClicked
        searchClient();
    }//GEN-LAST:event_client_but_searchMouseClicked

    private void client_but_manageJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_manageJobActionPerformed

        if (!client_li_jobs.isSelectionEmpty() && (client_li_jobs.getSelectedValue().equals("No Jobs") == false) && (client_li_jobs.getSelectedValue().equals("No selected client") == false)) {

            manageJob(selectedJobID);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Job to manage");
        }
    }//GEN-LAST:event_client_but_manageJobActionPerformed

    private void client_li_jobsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_client_li_jobsValueChanged
        itemStateChangedInt++;
        if (itemStateChangedInt == 3) {
            if (!clientJobs.isEmpty()) {
                if (clientJobs.get(0).equals("No Jobs") || clientJobs.get(0).equals("No client selected")) {

                }
                if (client_li_jobs.getSelectedIndex() > -1) {
                    selectedJobID = clientJobs.get(client_li_jobs.getSelectedIndex() + 1);
                }
            }
            itemStateChangedInt = 1;
        }
    }//GEN-LAST:event_client_li_jobsValueChanged

    private void client_but_manageClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_manageClientActionPerformed
        enablePanel_Client(true);
        //As per user testing
        //Will only enable if a client has been selected
        client_but_showAll.setEnabled(false);
        editOrAdd = "edit";
    }//GEN-LAST:event_client_but_manageClientActionPerformed

    private void client_but_insertAdrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_insertAdrActionPerformed

        if (editOrAdd.equals("add")) {
            AddressPane ap = new AddressPane(client_tf_address);
        } else if (editOrAdd.equals("edit")) {
            AddressPane ap = new AddressPane(client_tf_address);
        }

    }//GEN-LAST:event_client_but_insertAdrActionPerformed

    private void client_tf_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_tf_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_client_tf_IDActionPerformed

    private void client_but_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_cancelActionPerformed
        enablePanel_Client(false);
        client_but_showAll.setEnabled(true);
        clearPanel_Client();
    }//GEN-LAST:event_client_but_cancelActionPerformed

    private void client_but_doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_doneActionPerformed
        if (editOrAdd.equals("add")) {
            addClient();
            editOrAdd = "";   
        } else if (editOrAdd.equals("edit")) {
            editClient();
            editOrAdd = "";   
        }
        client_but_showAll.setEnabled(true);
        enablePanel_Client(false);
        clearPanel_Client();
        populateClientTable();
    }//GEN-LAST:event_client_but_doneActionPerformed

    private void client_but_doneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client_but_doneMouseClicked

    }//GEN-LAST:event_client_but_doneMouseClicked

    private void client_but_newClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_client_but_newClientActionPerformed
        enablePanel_Client(true);
        clearPanel_Client();
        client_but_showAll.setEnabled(false);
        editOrAdd = "add";
        System.out.println(editOrAdd);
    }//GEN-LAST:event_client_but_newClientActionPerformed

    private void client_but_newClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client_but_newClientMouseClicked
        //As per user testing
        //Disable edit clients button while adding a client
        client_but_manageClient.setEnabled(false);
    }//GEN-LAST:event_client_but_newClientMouseClicked

    private void client_table_clientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client_table_clientsMouseClicked

        //As per user testing
        //Will only enable if a client has been selected
        client_but_manageClient.setEnabled(true);
        //As per user testing
        //Will only enable if a client has been selected
        client_but_manageJob.setEnabled(true);
        //As per user testing
        //Will only enable if a client has been selected
        client_li_jobs.setEnabled(true);

        showJobsForSelectedClient();
        populateClientTextfields();
    }//GEN-LAST:event_client_table_clientsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //GUI_mainGUI mine = new GUI_mainGUI();
                //mine.setVisible(true);
                new GUI_mainGUI().setVisible(true);
            }
        });
    }

    // <editor-fold defaultstate="collapsed" desc="Swing variable declarations">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton client_but_cancel;
    private javax.swing.JButton client_but_done;
    private javax.swing.JButton client_but_insertAdr;
    private javax.swing.JButton client_but_manageClient;
    private javax.swing.JButton client_but_manageJob;
    private javax.swing.JButton client_but_newClient;
    private javax.swing.JButton client_but_search;
    private javax.swing.JButton client_but_showAll;
    private javax.swing.JComboBox<String> client_combo_searchVia;
    private javax.swing.JLabel client_l_clientCode;
    private javax.swing.JList<String> client_li_jobs;
    private javax.swing.JTable client_table_clients;
    private javax.swing.JTextField client_tf_ID;
    private javax.swing.JTextField client_tf_address;
    private javax.swing.JTextField client_tf_email;
    private javax.swing.JTextField client_tf_fname;
    private javax.swing.JTextField client_tf_lname;
    private javax.swing.JTextField client_tf_nr;
    private javax.swing.JTextField client_tf_searchInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jobs_but_manageJob;
    private javax.swing.JButton jobs_but_newJob;
    private javax.swing.JButton jobs_but_refreshTable;
    private javax.swing.JLabel jobs_l_clientCode;
    private javax.swing.JRadioButton jobs_rb_QAcc;
    private javax.swing.JRadioButton jobs_rb_QIP;
    private javax.swing.JRadioButton jobs_rb_QRej;
    private javax.swing.JRadioButton jobs_rb_WIP;
    private javax.swing.JRadioButton jobs_rb_all;
    private javax.swing.JRadioButton jobs_rb_closed;
    private javax.swing.JRadioButton jobs_rb_open;
    private javax.swing.JRadioButton jobs_rb_pPend;
    private javax.swing.JRadioButton jobs_rb_pRec;
    private javax.swing.JTable jobs_table_jobs;
    private javax.swing.JTextField jobs_tf_email;
    private javax.swing.JTextField jobs_tf_fname;
    private javax.swing.JTextField jobs_tf_lname;
    private javax.swing.JTextField jobs_tf_nr;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JButton staff_but_add;
    private javax.swing.JButton staff_but_cancel;
    private javax.swing.JButton staff_but_done;
    private javax.swing.JButton staff_but_insertAddress;
    private javax.swing.JButton staff_but_manageStaff;
    private javax.swing.JButton staff_but_newStaff;
    private javax.swing.JButton staff_but_remove;
    private javax.swing.JLabel staff_l_staffCode;
    private javax.swing.JList<String> staff_list_skillset;
    private javax.swing.JSpinner staff_spin_rate;
    private javax.swing.JTable staff_table_staff;
    private javax.swing.JTextField staff_tf_ID;
    private javax.swing.JTextField staff_tf_address;
    private javax.swing.JTextField staff_tf_email;
    private javax.swing.JTextField staff_tf_fname;
    private javax.swing.JTextField staff_tf_lname;
    private javax.swing.JTextField staff_tf_nr;
    private javax.swing.JTextField staff_tf_skillsetInput;
    private javax.swing.ButtonGroup viewButGroup;
    // End of variables declaration//GEN-END:variables
//</editor-fold>

    private void connection() {
        try {
            conn = DriverManager.getConnection("jdbc:ucanaccess://afordableDB.accdb");
        } catch (Exception e) {
            System.out.println("Database connection error" + e);
        }
    }

    private void populateClientTable() {
        try {
            Statement st = conn.createStatement();
            //String query = "select * from client";
            //String query = "Select clientID as Client_Code,fname as Name,lname as Surname,connum as Contact_Number,email from client";
            String query = "Select clientID as Client_Code,fname as Name,lname as Surname,connum as Contact_Number from client";
            rs = st.executeQuery(query);
            client_table_clients.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            System.out.println("error " + e);
        }
    }

    private void addClient() {
        try {
            String sql = "Insert into client(FName,LName,ConNum,Email,ID,Address) values(?,?,?,?,?,?)";
            PreparedStatement statement = conn.prepareStatement(sql);

            statement.setString(1, client_tf_fname.getText());
            statement.setString(2, client_tf_lname.getText());
            statement.setString(3, client_tf_nr.getText());
            statement.setString(4, client_tf_email.getText());
            statement.setString(5, "not inserted");
            statement.setString(6, "not inserted");

            if (client_tf_ID.getText().length() > 0) {
                statement.setString(5, client_tf_ID.getText().toString());
            }

            if (client_tf_address.getText().length() > 0) {
                statement.setString(6, client_tf_address.getText().toString());
            }
            statement.executeUpdate();
            populateClientTable();
            

        } catch (Exception e) {
            System.out.println("Problem with adding client" + e);
        }
    }

    private void searchClient() {
        String query = "select * from client where ";
        String searchVia = client_combo_searchVia.getModel().getSelectedItem().toString();
        String searchArgument = "";
        if (searchVia.equals("Name")) {
            //query = query + "FName = " + client_tf_searchInput.getText();
            searchArgument = "FName = '" + client_tf_searchInput.getText() + "'";
        } else if (searchVia.equals("ID")) {
            //query = query + "ID = " + client_tf_searchInput.getText();
            searchArgument = "ID = '" + client_tf_searchInput.getText() + "'";
        } else if (searchVia.equals("Surname")) {
            //query = query + "LName = " + client_tf_searchInput.getText();
            searchArgument = "LName = '" + client_tf_searchInput.getText() + "'";
        }
        query = query + searchArgument;
        try {
            Statement st = conn.createStatement();

            rs = st.executeQuery(query);
            client_table_clients.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            System.out.println("error " + e);
        }
    }

    private void populateJobTable() {
        try {
            Statement st = conn.createStatement();
            //String query = "select * from jobs";
            String query = "select jobid as Job_ID,jobtitle as Job_Title,jobState as Status from jobs";
            rs = st.executeQuery(query);
            jobs_table_jobs.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            System.out.println("Problem with populating jobs table:" + e);
        }
        jobs_rb_all.setSelected(true);
    }

    private void populateJobTable(String state) {
        try {
            String query = "";
            //check to see of it refers to the job state or the quote state
            if (state.equals("Quote in Progress") || state.equals("Quote Accepted") || state.equals("Quote Rejected")|| state.equals("Payment Pending")|| state.equals("Payment Received")) {
                query = "select jobid as Job_ID,jobtitle as Job_Title,quoteState as Status from jobs where QuoteState = '" + state + "'";
            } else if (state.equals("Open")) {
                query = "select jobid as Job_ID,jobtitle as Job_Title,jobState as Status from jobs where jobState != 'Closed'";
            } else {
                query = "select jobid as Job_ID,jobtitle as Job_Title,jobState as Status from jobs where jobState = '" + state + "'";
            }

            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            jobs_table_jobs.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            System.out.println("error with populateJobTable" + e);
        }
    }

    private void populateStaffTable() {
        try {
            st = conn.createStatement();
            String query = "select StaffID, FName as Name, LName as Surname, ConNum as Contact, Rate from Staff";
            rs = st.executeQuery(query);
            staff_table_staff.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            System.out.println("problem with populateStaffTable :" + e);
        }

    }

    private void showJobsForSelectedClient() {
        clientJobs.clear();
        clientJobs.add("");
        client_li_jobs.setModel(blankListModel);
        String selectedClientCode = null;
        try {
            Statement st = conn.createStatement();
            int row = client_table_clients.getSelectedRow();
            selectedClientCode = (client_table_clients.getModel().getValueAt(row, 0).toString());
            String query = "select * from jobs where clientID = '" + selectedClientCode + "'";
            ResultSet rs = st.executeQuery(query);
            DefaultListModel tempModel = new DefaultListModel();
            if (rs.next()) {
                do {
                    tempModel.addElement(rs.getString("jobtitle"));
                    clientJobs.add(rs.getString("jobID"));
                    client_li_jobs.setModel(tempModel);
                } while (rs.next());
            } else {

                tempModel.addElement("No Jobs");
                client_li_jobs.setModel(tempModel);
                clientJobs.add("No Jobs");
            }

        } catch (Exception e) {
            System.out.println("Problems with showJobsForSelectedClient : " + e);
        }
    }

    private void populateClientTextfields() {
        try {
            Statement st = conn.createStatement();
            int row = client_table_clients.getSelectedRow();
            String selectedClientCode = (client_table_clients.getModel().getValueAt(row, 0).toString());
            String query = "select * from client where clientID = '" + selectedClientCode + "'";
            rs = st.executeQuery(query);
            while (rs.next()) {
                client_tf_fname.setText(rs.getString("fname"));
                client_tf_nr.setText(rs.getString("ConNum"));
                client_tf_lname.setText(rs.getString("lname"));
                client_tf_email.setText(rs.getString("email"));
                client_tf_ID.setText(rs.getString("id"));
                client_l_clientCode.setText(rs.getString("ClientID"));

                String address[] = rs.getString("address").split("#");
                if (address.length == 6) {
                    client_tf_address.setText(address[0] + ", " + address[1] + ", " + address[2] + ", " + address[3] + ", " + address[4] + ", " + address[5] );
                } else {
                    client_tf_address.setText(rs.getString("address"));
                }

            }

        } catch (Exception e) {
            System.out.println("Problem with populateCLientTextfields" + e);
        }

    }

    private void editClient() {
        try {

            String sql = "update client set FName = ? ,LName = ?,ConNum = ?,Email = ?,ID = ?,Address = ? where ClientID = ?";
            PreparedStatement statement = conn.prepareStatement(sql);

            statement.setString(1, client_tf_fname.getText());
            statement.setString(2, client_tf_lname.getText());
            statement.setString(3, client_tf_nr.getText());
            statement.setString(4, client_tf_email.getText());
            statement.setString(5, client_tf_ID.getText());
            statement.setString(6, client_tf_address.getText());
            statement.setString(7, client_l_clientCode.getText());

            int choice = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to update this Client");

            if (choice == 0) {

                int rowsUpdated = statement.executeUpdate();
                if (rowsUpdated > 0) {
                    System.out.println("An existing client was updated successfully!");
                }

                populateClientTable();
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void setAddressOnGui(String a) {
        client_tf_address.setText(a);
    }

    private void populateClientTextFieldsForJob() {
        try {
            Statement st = conn.createStatement();
            int row = jobs_table_jobs.getSelectedRow();
            selectedJobID = (jobs_table_jobs.getModel().getValueAt(row, 0).toString());
            String query = "select * from jobs where jobID = '" + selectedJobID + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                String myclientCode = rs.getString("ClientID");

                Statement st2 = conn.createStatement();
                String query2 = "select * from client where clientID = '" + myclientCode + "'";
                ResultSet rs2 = st2.executeQuery(query2);

                while (rs2.next()) {
                    jobs_tf_fname.setText(rs2.getString("fname"));
                    jobs_tf_lname.setText(rs2.getString("lname"));
                    jobs_tf_nr.setText(rs2.getString("ConNum"));
                    jobs_tf_email.setText(rs2.getString("email"));
                    jobs_l_clientCode.setText(rs2.getString("ClientID"));
                }
            }

        } catch (Exception e) {
            System.out.println("Problem with populateCLientTextfields on job : " + e);
            e.printStackTrace();
        }
    }

    private void populateStaffTextfields() {
        try {
            st = conn.createStatement();
            int row = staff_table_staff.getSelectedRow();
            String selectedStaffCode = (staff_table_staff.getModel().getValueAt(row, 0).toString());
            String query = "select * from Staff where StaffID = '" + selectedStaffCode + "'";
            String skills = "";
            rs = st.executeQuery(query);
            while (rs.next()) {
                staff_l_staffCode.setText(rs.getString("staffID"));
                staff_tf_fname.setText(rs.getString("FName"));
                staff_tf_lname.setText(rs.getString("LName"));
                staff_tf_ID.setText(rs.getString("ID"));
                staff_tf_nr.setText(rs.getString("ConNum"));
                staff_tf_email.setText(rs.getString("Email"));
                staff_spin_rate.getModel().setValue(rs.getInt("Rate"));
                skills = rs.getString("SkillSet");
                //staff_tf_address.setText(rs.getString("Address"));
                //Ryans crazy moments
                String address[] = rs.getString("Address").split("#");
                if (address.length == 6) {
                    staff_tf_address.setText(address[0] + ", " + address[1] + ", " + address[2] + ", " + address[3] + ", " + address[4] + ", " + address[5] );
                } else {
                    staff_tf_address.setText(rs.getString("Address"));
                }
            }
            String[] skillsArray = skills.split(",");
            DefaultListModel a = new DefaultListModel();
            for (String skill : skillsArray) {
                a.addElement(skill);
            }
            staff_list_skillset.setModel(a);
        } catch (Exception e) {
            System.out.println("Problem with populateStaffTextfields" + e);
        }
    }

    private void editStaff() {
        try {

            String sql = "update Staff set FName = ? ,LName = ?,ID = ?,ConNum = ?,Email = ?, Rate = ?,SkillSet = ?, Address = ? WHERE StaffID = ?";
            PreparedStatement statement = conn.prepareStatement(sql);

            statement.setString(1, staff_tf_fname.getText());
            statement.setString(2, staff_tf_lname.getText());
            statement.setString(3, staff_tf_ID.getText());
            statement.setString(4, staff_tf_nr.getText());
            statement.setString(5, staff_tf_email.getText());
            statement.setInt(6, Integer.parseInt(staff_spin_rate.getModel().getValue().toString()));
            String skillset = "";
            for (int i = 0; i < staff_list_skillset.getModel().getSize(); i++) {
                skillset = staff_list_skillset.getModel().getElementAt(i) + "," + skillset;
            }
            statement.setString(7, skillset);
            statement.setString(8, staff_tf_address.getText());
            statement.setString(9, staff_l_staffCode.getText());

            int choice = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to update this Staff Member");

            if (choice == 0) {

                int rowsUpdated = statement.executeUpdate();
                if (rowsUpdated > 0) {
                    System.out.println("An existing Staff Member was updated successfully!");
                }

                populateStaffTable();
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void addStaff() {
        try {

            String sql = "Insert into Staff(FName,LName,ID,ConNum,Email,Rate,SkillSet,Address) values(?,?,?,?,?,?,?,?)";
            PreparedStatement statement = conn.prepareStatement(sql);

            statement.setString(1, staff_tf_fname.getText());
            statement.setString(2, staff_tf_lname.getText());
            statement.setString(3, staff_tf_ID.getText());
            statement.setString(4, staff_tf_nr.getText());
            statement.setString(5, staff_tf_email.getText());
            statement.setInt(6, Integer.parseInt(staff_spin_rate.getModel().getValue().toString()));
            String skillset = "";
            for (int i = 0; i < staff_list_skillset.getModel().getSize(); i++) {
                skillset = staff_list_skillset.getModel().getElementAt(i) + "," + skillset;
            }
            statement.setString(7, skillset);
            statement.setString(8, staff_tf_address.getText());

            statement.executeUpdate();
            populateStaffTable();
        } catch (Exception e) {
            System.out.println("Problem with adding staff" + e);
        }
    }  

}
